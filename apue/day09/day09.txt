进程间通信的两个重要概念
进程的同步与互斥
	互斥，由于各进程都要共享资源，而且这些资源需要互斥使用，因此各进程间竞争使用这些资源，进程的这种关系称为进程的互斥
	系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源
	在进程中涉及到互斥资源的程序叫临界区

火车售票系统
	A进程               B进程
	if ( x > 0 ) {      if ( x > 0 ) {
		x --;              x--;
	}                   }
	来了两个人订了统一张票，造成的原因是对X没有互斥访问

同步：指的是多个进程需要行互配合共同完成一项任务.
 	司机进程             售票员进程
	while ( 1 ) {		while ( 1 ) {
		启动车辆；          关门；
		正常运行;           售票;
		到站停车；          开门;
	}	                }

进程间通信的目的：
	传输数据：需要将一个进程的数据传送给另一个进程
	资源共享：多个进程间要访问共享的资源
	通知事件：一个进程需要向另一个进程发送消息，通知他们发送了某种事件

进程间通信的发展
	管道
	SytemV进程间通信(IPC)
	POSIX进程间通信(推广的不好)

进程间通信的分类：
	文件 
	文件锁
	管道(pipe)和有名管道(FIFO)
	信号

	消息队列  实现数据传输
	共享内存  数据共享
	信号量    同步和互斥

	互斥量
	条件变量
	读写锁

	套接字

进程间信息共享的三种方式

IPC对象的持续性
	随进程持续：一直存在直到最后一个打开的进程退出(pipe,FIFO)
	随内核持续：一直存在直到内核自举或显示删除(SystemV消息队列，共享内存，信号量)
	随文件持续：一直存在直到显式删除，即使内核自举也存在(POSIX消息队列，共享内存，信号量)

死锁:
	指的是多个进程之间相互等待对方的资源，而在等待到对方资源之间又不释放自己的资源，这样可能造成循环等待的一种现象，如果所有的进程都在等待一个不可能发生的事，则进程死锁了。

死锁的必要条件
	互斥性：进程对资源的排他性使用，即资源在某一短时间内只能给一个进程使用。
	请求和保持条件：当进程因请求资源而阻塞时，对已经获得的资源不释放。
	不可剥夺条件：进程已经获得的资源在未使用完之前，不能被剥夺，只能用完后自己释放。
	环路等待条件：各个进程组成封闭的环形链，每个进程等待下一个进程占用的资源。

防止死锁的办法：
	资源一次性分配，破坏请求和保持条件。
	可剥夺资源，破坏不可剥夺条件。
	资源的有序分配，破坏环路等待条件。

死锁的避免：
	防止死锁的几种办法中，严重影响系统的性能，因此避免死锁采用了较弱的限制，来达到较为满意的系统性能。
	由于避免死锁的策略中，允许动态的申请资源，因而，系统在进行资源分配之前预先计算资源分配的安全性，因此，资源分配不会导致进入不安全状态，则将资源分配给进程，否则进程等待。最具代表性的算法就是银行家算法，
	
银行家算法
为了保证资金安全性，银行家规定：
	1.当一个顾客对资金的最大需求量不超过银行家现有的资金量时就可以接纳该客户。
	2.顾客可以分期贷款，但是贷款的总额不能超过最大需求量。
	3.当银行家现有的资金不能满足顾客需求的贷款额度时，对顾客的贷款可以在有限的时间内推迟支付。
	4.当顾客得到所需的全部资金后，一定能在有限的时间内归还所有的资金


哲学家就餐问题
	
解决方法：
	1.服务生解法
	2.仅当一个哲学家的两边的叉子都存在才允许拿叉子
	3.对哲学家进行编号，奇数的先拿左边，偶数先拿右边
	

信号量和PV
	信号量和PV操作是由Dijkstra提出的，他在网络的最短路径,程序设计方面，最早提出了goto是有害的
		
	信号量
		互斥
		同步

信号量值的含义 samephore
	S > 0 可用的资源的个数
	s = 0 表示无资源可用，也无进程等待此资源
	s < 0 |s|表示等待队列中的进程的个数

信号量
	struct semaphore{
			int value; //计数值
			pointer_PCB queue; //等待队列，有哪些进程处于等待状态
	};

在申请资源前使用P操作
P原语
	P(S) {
		s.value--;
		if ( s.value < 0 ) {
			将该进程状态置为等待态
			将该进程的PCB追加到相应的等待队列并插入s.queue的末尾
		}
	}

V原语
	V(S) {
		s.value++;
		if ( s.value <= 0 ) {
			唤醒相应等待队列s.queue中的第一个进程
			将该进程置为就绪态
			并将进程插入就绪队列
		}
	}

用PV原语解决司机与售票员的问题

	司机进程                售票员进程
	S1(0);                  S2(0);
	while ( 1 ) {           while ( 1 ) {
		P(S1);
		启动车辆                关门
			                    V(S1);
		正常运行                售票
								P(S2);
		到站停车                开门
		V(S2);
	}                       }

用PV原语来解决售票系统
	S(1)
	P(S);
	if ( x > 0 ) {
		x--;
	}
	V(S);


管道
	我们把从一个进程连接到另一个进程的数据流称为"管道"
ls | wc -c
  本质：内核一块固定大小的缓存

管道限制
	管道为半双工的，数据只能从一个方向往另一个方向流动;如果需要双向流动就需要使用两个管道
	只能用于具有共同祖先的进程之间进行通信，通常，一个管道由一个进程创建，然后该进程用fork，此后，父子进程之间就可使用该管道

创建匿名管道的函数
int pipe(int fd[2]);
fd文件描述符组，fd[0]表示读端，fd[1]表示写端


















