信号在内核的表示方式：
	执行信号处理动作称为信号递达(delivery)，信号从产生到递达之间的状态称为信号未决(pending)，进程可以选择阻塞(block)某个信号，被阻塞的信号产生是将保持在未决状态，直到进程解除对此信号的阻塞，才执行递达动作。注意，阻塞和忽略是不同的，只要信号被阻塞就不会递达，而忽略是在递达之后可选的一种处理动作。

信号屏蔽->当为1表示当信号产生，会被阻塞。一旦信号来了，会将pending中的相应位置1，表示信号为未决状态，直到解除，将block置0，信号递达，pending置0，执行信号处理函数。

信号集操作
int sigemptyset(sigset_t *set){ //清空信号集
	return *set = 0;
}

int sigfillset(sigset_t *set){ //填充信号集
	return (*set = ~0, 0);
}

int sigaddset(sigset_t *set, int signum){ //将signum添加到set
	*set |= (1<<signum);
}
	
int sigdelset(sigset_t *set, int signum){ //从set中去除signum
	*set &= ~(1<<signum);
}

//判断signum在信号集中吗
int sigismember(const sigset_t *set, int signum){
	return ( (set & 1<<signum) != 0)
}

int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
读取或更改进程的信号屏蔽字
	how
		假设当前的信号屏蔽字是mask
		SIG_BLOCK
			mask = mask|set;
		SIG_UNBLOCK
			mask = mask&~set;
		SIG_SETMASK
			mask = set;

取得进程中未决状态的信号集放在set中
int sigpending(sigset_t *set);

信号屏蔽的切换
	int sigsuspend(const sigset_t *mask)
	是一个阻塞函数，直到信号来了才返回，如果mask中设置了某些信号，对应的信号就会被屏蔽
	pause + 信号屏蔽功能
	屏蔽新的信号，使原来的信号屏蔽失效。

int sigaction(int signum,  // 要处理的信号
	const struct sigaction *act, //
	struct sigaction *oldact);

struct sigaction {
	void     (*sa_handler)(int);
	void     (*sa_sigaction)(int, siginfo_t *, void *);
	sigset_t   sa_mask;
	int        sa_flags;
	void     (*sa_restorer)(void);
};

int sigqueue(pid_t pid, int sig,  const union sigval value);
union sigval {
	int   sival_int;
	void *sival_ptr;
};
通过这个函数发送信号，并带数据给对方，对方要接受数据必须让sa_flag =
SA_SIGINFO,并且要用sa_sigaction信号处理函数，接到对方的数据放在siginfo_t里面的si_value.sival_int

int sleep(unsigned int seconds)
int usleep(useconds_t usec)
int  nanosleep(const struct timespec *req, struct timespec *rem);
struct timespec {
	time_t tv_sec;  /* seconds */
	long   tv_nsec; /* nanoseconds */
};

定时器
int setitimer(int which, const struct itimerval *new_value,
                     struct itimerval *old_value);
	ITIMER_REAL
	ITIMER_VIRTUAL
	ITIMER_PROF

struct itimerval {
	struct timeval it_interval; //定时器的间隔时间
	struct timeval it_value;    //定时器的第一次运行时间
};

struct timeval {
	long tv_sec;   /* seconds */
	long tv_usec;  /* microseconds */
};

