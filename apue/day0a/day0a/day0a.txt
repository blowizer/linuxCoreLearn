管道读写规则：
	当没有数据可读时：
		O_NONBLOCK disable: read调用会阻塞，直到有数据到来为止。
		O_NONBLOCK enable:read调用返回-1，错误码是EAGAIN
	当管道的所有读端都关闭：
		往管道里写数据，则write操作会引起SIGPIPE信号
	当要写入的数据量不大与PIPE_BUF时，Linux将保证写入原子性
	当要写入的数据量大于PIPE_BUF时，Linux将不再保证写入的原子性

命名管道
	匿名管道和命名管道的区别与联系：
		匿名管道是由pipe创建并打开
		命名管道是用mkfifo创建，用open打开
	FIFO和pipe之间的区别在于他们创建和打开的方式不同，一旦这些工作完成之后，他们具有相同的语义.	

	命名管道的打开规则：
		如果为了读而打开FIFO时，
		O_NONBLOCK没设置，阻塞，直到相应进程为写而打开该FIFO。
		O_NONBLOCK设置，则立刻返回成功
		如果为了写而打开FIFO时，
		O_NONBLOCK没设置，阻塞，直到相应进程为读而打开该FIFO。
		O_NONBLOCK设置，则立刻返回错误 ( ENXIO )
				
消息队列
	消息队列提供了一个从一个进程向另外一个进程发送一块数据的方法。
	每个消息块都被认为是一个类型，接收者进程接受的数据块可以有不同的类型值。
	消息队列也有管道的一样的不足，就是每个消息的最大长度有上限(MSGMAX), 每个消息队列的总的字节数上限(MSGMNB),系统上消息队列的总数也有一个上限(MSGMNI)
IPC对象的数据结构
	内核为每个IPC对象维护一个数据结构
	struct ipc_perm {
		key_t          __key;   /* Key supplied to msgget(2) */
		uid_t          uid;     /* Effective UID of owner */
		gid_t          gid;     /* Effective GID of owner */
		uid_t          cuid;    /* Effective UID of creator */
		gid_t          cgid;    /* Effective GID of creator */
		unsigned short mode;    /* Permissions */
		unsigned short __seq;   /* Sequence number */
	};
消息队列的结构体
	struct msqid_ds {
		struct ipc_perm msg_perm; /* Ownership and permissions */
        time_t msg_stime;    /* Time of last msgsnd(2) */
        time_t msg_rtime;    /* Time of last msgrcv(2) */
        time_t msg_ctime;    /* Time of last change */
        unsigned long __msg_cbytes; /* Current number of bytes in
        msgqnum_t msg_qnum;     /* Current number of messages
        msglen_t msg_qbytes;   /* Maximum number of bytes
        pid_t    msg_lspid;    /* PID of last msgsnd(2) */
        pid_t    msg_lrpid;    /* PID of last msgrcv(2) */
    };

消息队列在内核中的表示

消息队列的函数
int msgget(key_t key, int msgflg)
	创建或访问一个消息队列
	key消息队列的名字
	msgflg有权限标志构成
	如果成功返回消息队列的标识码，失败-1

key可以指定为IPC_PRIVATE, 表示每调用一次都会创建一个新的消息队列,此时，两个进程不能共享同一个消息队列，只可以在本进程和父子进程之间访问

直接打开：msgget(1234, 0),不要给权限，给了权限，如果和原来的权限不对，会报错

int msgctl(int msqid, int cmd, struct msqid_ds *buf)	
	cmd : IPC_STAT  // 把msqid_s结构中的数据设置为消息队列的当前值
		  IPC_SET   // 在有权限的前提下，把buf中的值设置到当前关联
					// 消息队列
		  IPC_RMID   // 删除消息队列

int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
把一条消息添加到消息队列中

	msgp必须是个结构体，并且该结构体的第一个成员必须是long类型
struct msgbuf {
	long mtype;   /* message type, must be > 0 */
	char mtext[1];/* message data */
};

msgsz表示msgp指向的那个消息的大小，不包括mtype的大小
msgflg:控制消息队列满时要发生的事情，IPC_NOWAIT，表示消息队列满时不等待，直接返回EAGAIN错误

接收消息队列中的数据
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,
                      int msgflg);
msgtyp
	= 0 返回消息队列中的第一条消息
	> 0 返回消息队列中类型等于msgtyp的第一条消息
	< 0 返回消息队列中类型等于|msgtyp|的消息，并且是满足条件中的消息类型最小的消息 

		














